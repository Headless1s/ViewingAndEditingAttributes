&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИмяОбъекта = Параметры.ИмяОбъекта;
	ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ИмяОбъекта);
	
	СоздатьДинамическийСписокВыбора(ИмяОбъекта, ОбъектМетаданных);
	УстановитьЗаголовокФормы(ОбъектМетаданных);
	
	Если ЗначениеЗаполнено(Параметры.ТекущаяСсылка) Тогда
		Элементы.Список.ТекущаяСтрока = Параметры.ТекущаяСсылка;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьДинамическийСписокВыбора(ИмяОбъекта, ОбъектМетаданных)
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	МассивРеквизитов = Новый Массив;
	МассивРеквизитов.Добавить(ОбработкаОбъект.РеквизитДинамическийСписок("Список"));
	
	ИзменитьРеквизиты(МассивРеквизитов);
	
	ЭтотОбъект.Список.ОсновнаяТаблица = ИмяОбъекта;
	ЭтотОбъект.Список.ДинамическоеСчитываниеДанных = Истина;
	
	ЭлементСписок = Элементы.Добавить("Список", Тип("ТаблицаФормы"));
	
	ЭлементСписок.ПутьКДанным = "Список";
	ЭлементСписок.Отображение = ОтображениеТаблицы.Список;
	ЭлементСписок.РежимВыбора = Истина;
	
	ЭлементСписок.УстановитьДействие("ВыборЗначения", "СписокВыборЗначения");
	
	ЭтотОбъект.Список.УстановитьОбязательноеИспользование("Ссылка", Истина);
	
	ЧастиИмени = СтрРазделить(ИмяОбъекта, ".");
	
	СтруктураРеквизитов = ПолучитьСтруктуруРеквизитов();
	НайтиРеквизитыПоСтруктуре(СтруктураРеквизитов, ОбъектМетаданных);
	
	Для каждого Реквизит Из СтруктураРеквизитов Цикл
		ПараметрыРеквизита = Реквизит.Значение;
		Если ПараметрыРеквизита.Найден Тогда
			ДобавитьЭлементКолонкуПоИмениРеквизита(Реквизит.Ключ);
			Если ПараметрыРеквизита.Сортировать Тогда
				ДобавитьЭлементПорядкаПоИмениРеквизита(Реквизит.Ключ);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЭлементПорядкаПоИмениРеквизита(Имя)
	
	Порядок = ЭтотОбъект.Список.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
	Порядок.Поле = Новый ПолеКомпоновкиДанных(Имя);
	Порядок.Использование = Истина;
	Порядок.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Убыв;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЭлементКолонкуПоИмениРеквизита(Имя)
	
	НоваяКолонка = Элементы.Добавить("Список" + Имя, Тип("ПолеФормы"), Элементы.Список);
	НоваяКолонка.ПутьКДанным = "Список." + Имя;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокФормы(ОбъектМетаданных)
	
	Если Не ПустаяСтрока(ОбъектМетаданных.ПредставлениеСписка) Тогда
		Заголовок = ОбъектМетаданных.ПредставлениеСписка;
	Иначе
		Заголовок = ОбъектМетаданных.Синоним;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруРеквизитов()
	
	СтруктураРеквизитов = Новый Структура();
	СтруктураРеквизитов.Вставить("Дата", Новый Структура("Найден, Сортировать", Ложь, Истина));
	СтруктураРеквизитов.Вставить("Номер", Новый Структура("Найден, Сортировать", Ложь, Ложь));
	СтруктураРеквизитов.Вставить("Наименование", Новый Структура("Найден, Сортировать", Ложь, Истина));
	СтруктураРеквизитов.Вставить("Код", Новый Структура("Найден, Сортировать", Ложь, Ложь));
	СтруктураРеквизитов.Вставить("Сумма", Новый Структура("Найден, Сортировать", Ложь, Ложь));
	СтруктураРеквизитов.Вставить("СуммаДокумента", Новый Структура("Найден, Сортировать", Ложь, Ложь));
	СтруктураРеквизитов.Вставить("Контрагент", Новый Структура("Найден, Сортировать", Ложь, Ложь));
	СтруктураРеквизитов.Вставить("Владелец", Новый Структура("Найден, Сортировать", Ложь, Ложь));
	СтруктураРеквизитов.Вставить("Партнер", Новый Структура("Найден, Сортировать", Ложь, Ложь));
	СтруктураРеквизитов.Вставить("Организация", Новый Структура("Найден, Сортировать", Ложь, Ложь));
	СтруктураРеквизитов.Вставить("Склад", Новый Структура("Найден, Сортировать", Ложь, Ложь));
	СтруктураРеквизитов.Вставить("СкладОтправитель", Новый Структура("Найден, Сортировать", Ложь, Ложь));
	СтруктураРеквизитов.Вставить("СкладПолучатель", Новый Структура("Найден, Сортировать", Ложь, Ложь));
	СтруктураРеквизитов.Вставить("Номенклатура", Новый Структура("Найден, Сортировать", Ложь, Ложь));
	
	Возврат СтруктураРеквизитов;
	
КонецФункции

&НаСервереБезКонтекста
Процедура НайтиРеквизитыПоСтруктуре(СтруктураРеквизитов, ОбъектМетаданных)
	
	Для каждого Реквизит Из ОбъектМетаданных.СтандартныеРеквизиты Цикл
		
		Если СтруктураРеквизитов.Свойство(Реквизит.Имя) Тогда
			СтруктураРеквизитов[Реквизит.Имя].Найден = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого Реквизит Из ОбъектМетаданных.Реквизиты Цикл
		
		Если СтруктураРеквизитов.Свойство(Реквизит.Имя) Тогда
			СтруктураРеквизитов[Реквизит.Имя].Найден = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыборЗначения(Элемент, Значение, СтандартнаяОбработка)
	
	Закрыть(Значение);
	
КонецПроцедуры

&НаКлиенте
Процедура ИдентификаторПриИзменении(Элемент)
	
	НачатьУстановкуОтбораПоСсылке();
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьУстановкуОтбораПоСсылке()
	
	Если ЭтоУникальныйИдентификатор(Идентификатор) Тогда
		
		НайденнаяСсылка = СсылкаПоУИД(ИмяОбъекта, Идентификатор);
		
		Если НайденнаяСсылка <> Неопределено Тогда
			
			УстановитьОтборПоСсылке(НайденнаяСсылка);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПоСсылке(Ссылка)
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		
		ЭтотОбъект.Список.Отбор.Элементы.Очистить();
		
	Иначе
		
		ЭлементОтбора = ЭтотОбъект.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ссылка");
		ЭлементОтбора.ПравоеЗначение = Ссылка;
		
		Элементы.Список.Обновить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИдентификаторНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Идентификатор = Элемент.ТекстРедактирования;
	НачатьУстановкуОтбораПоСсылке();
	
КонецПроцедуры

&НаКлиенте
Процедура ИдентификаторОчистка(Элемент, СтандартнаяОбработка)
	
	Если ЭтоУникальныйИдентификатор(Идентификатор) Или ЭтоУникальныйИдентификатор(Элемент.ТекстРедактирования) Тогда
		УстановитьОтборПоСсылке(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоУникальныйИдентификатор(Знач Значение) Экспорт
	
	Шаблон = "XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX";
	
	Если СтрДлина(Шаблон) <> СтрДлина(Значение) Тогда
		Возврат Ложь;
	КонецЕсли;
	Для Позиция = 1 По СтрДлина(Значение) Цикл
		// BSLLS:MagicNumber-off
		НевалидныйСимвол = КодСимвола(Шаблон, Позиция) = 88 // X
			И ((КодСимвола(Значение, Позиция) < 48 Или КодСимвола(Значение, Позиция) > 57) // 0..9
				И (КодСимвола(Значение, Позиция) < 97 Или КодСимвола(Значение, Позиция) > 102) // a..f
				И (КодСимвола(Значение, Позиция) < 65 Или КодСимвола(Значение, Позиция) > 70)) // A..F
			Или КодСимвола(Шаблон, Позиция) = 45 И КодСимвола(Значение, Позиция) <> 45; // -
		// BSLLS:MagicNumber-on
		Если НевалидныйСимвол Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаСервереБезКонтекста
Функция СсылкаПоУИД(ИмяОбъекта, УИД)
	
	НайденныеМетаданные = Метаданные.НайтиПоПолномуИмени(ИмяОбъекта);
	
	Если Метаданные.Справочники.Содержит(НайденныеМетаданные) Тогда
		ОбъектМенеджер = Вычислить("Справочники." + НайденныеМетаданные.Имя);
	ИначеЕсли Метаданные.Документы.Содержит(НайденныеМетаданные) Тогда
		ОбъектМенеджер = Вычислить("Документы." + НайденныеМетаданные.Имя);
	ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(НайденныеМетаданные) Тогда
		ОбъектМенеджер = Вычислить("ПланыВидовХарактеристик." + НайденныеМетаданные.Имя);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Ссылка = ОбъектМенеджер.ПолучитьСсылку(Новый УникальныйИдентификатор(УИД));
	
	Если Не Ссылка.Пустая() Тогда
		Возврат Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции